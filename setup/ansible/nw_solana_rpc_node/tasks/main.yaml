---
- name: Update and upgrade packages
  apt:
    update_cache: yes
    upgrade: yes

- name: Install required packages
  apt:
    name:
      - curl
      # - libudev-dev
      - libssl-dev
      - pkg-config
      - build-essential
      - git
      - clang
      - cmake
      - acl
    state: present

- name: Create solana user
  user:
    name: "{{ solana_user }}"
    home: "{{ solana_home }}"
    shell: /bin/bash
    system: yes

- name: Create ledger directory
  file:
    path: "{{ ledger_path }}"
    state: directory
    owner: "{{ solana_user }}"
    group: "{{ solana_user }}"
    mode: '0755'

- name: Create accounts directory
  file:
    path: "{{ accounts_path }}"
    state: directory
    owner: "{{ solana_user }}"
    group: "{{ solana_user }}"
    mode: '0755'

- name: Download Solana installer
  get_url:
    url: https://release.anza.xyz/v{{ solana_version }}/install
    dest: /tmp/solana-install
    mode: '0755'
  become_user: "{{ solana_user }}"

- name: Install Solana
  shell: /tmp/solana-install
  environment:
    SOLANA_INSTALL_DIR: "{{ solana_home }}/.local/share/solana/install"
  become_user: "{{ solana_user }}"

- name: Add Solana binary path to PATH
  lineinfile:
    path: "{{ solana_home }}/.bashrc"
    line: 'export PATH="{{ solana_home }}/.local/share/solana/install/active_release/bin:$PATH"'
    state: present
  become_user: "{{ solana_user }}"

- name: Check if validator keypair exists
  stat:
    path: "{{ solana_home }}/validator-keypair.json"
  register: keypair_file

- name: Generate validator keypair
  shell: |
    {{ solana_bin_path }}/solana-keygen new --no-bip39-passphrase -o {{ solana_home }}/validator-keypair.json
  become: yes
  become_user: "{{ solana_user }}"
  environment:
    PATH: "{{ solana_bin_path }}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  when: not keypair_file.stat.exists

- name: Set correct permissions for keypair
  file:
    path: "{{ solana_home }}/validator-keypair.json"
    owner: "{{ solana_user }}"
    group: "{{ solana_user }}"
    mode: '0600'
  when: not keypair_file.stat.exists

- name: Create Solana systemd service
  template:
    src: templates/solana-validator.service.j2
    dest: /etc/systemd/system/solana-validator.service
    mode: '0644'

- name: Create Solana config
  template:
    src: templates/validator-config.json
    dest: "{{ solana_home }}/validator-config.json"
    owner: "{{ solana_user }}"
    group: "{{ solana_user }}"
    mode: '0644'

- name: Create Solana Accounts DB config
  template:
    src: templates/accounts-db-config.yml
    dest: "{{ solana_home }}/accounts-db-config.yml"
    owner: "{{ solana_user }}"
    group: "{{ solana_user }}"
    mode: '0644'

- name: Configure sysctl for Solana validator
  copy:
    dest: /etc/sysctl.d/21-solana-validator.conf
    content: |
      # Increase UDP buffer sizes
      net.core.rmem_max=134217728
      net.core.wmem_max=134217728
      net.core.rmem_default=134217728
      net.core.wmem_default=134217728
      net.core.optmem_max=134217728
      net.core.netdev_max_backlog=50000

      # Increase memory mapped files limit
      vm.max_map_count = 1000000

      vm.dirty_ratio=50
      vm.dirty_background_ratio=20
      vm.swappiness=1

      # Increase number of allowed open file descriptors
      fs.nr_open = 1000000
    mode: '0644'

- name: Apply sysctl settings
  command: sysctl -p /etc/sysctl.d/21-solana-validator.conf

- name: Configure security limits for Solana
  copy:
    dest: /etc/security/limits.d/90-solana-nofiles.conf
    content: |
      # Increase process file descriptor count limit
      * - nofile 1000000
    mode: '0644'

- name: Update systemd system.conf
  lineinfile:
    path: /etc/systemd/system.conf
    regexp: '^#?DefaultLimitNOFILE='
    line: 'DefaultLimitNOFILE=1000000'
    state: present

- name: Set vm.max_map_count for current session
  sysctl:
    name: vm.max_map_count
    value: '1000000'
    state: present
    reload: yes

- name: Reload systemd
  systemd:
    daemon_reload: yes

# GEYSER
- name: Check if rust is installed
  command: which cargo
  register: cargo_check
  ignore_errors: yes

- name: Install rust and cargo
  shell: |
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    . "$HOME/.cargo/env"
  args:
    executable: /bin/bash
  when: cargo_check.rc != 0
  become: yes
  become_user: solana

- name: Add cargo to PATH
  lineinfile:
    path: /home/solana/.profile
    line: '. $HOME/.cargo/env'
    owner: solana
    group: solana
  when: cargo_check.rc != 0

- name: Install build dependencies
  apt:
    name:
      - build-essential
      - pkg-config
      - libssl-dev
      - protobuf-compiler
    state: present

- name: Check if yellowstone-grpc directory exists
  stat:
    path: /home/solana/yellowstone-grpc
  register: yellowstone_dir

- name: Check if geyser plugin is built
  stat:
    path: /home/solana/yellowstone-grpc/target/release/libyellowstone_grpc_geyser.so
  register: geyser_plugin

- name: Clone yellowstone-grpc repository
  git:
    repo: https://github.com/rpcpool/yellowstone-grpc.git
    dest: /home/solana/yellowstone-grpc
    version: master
    owner: solana
    group: solana
  when: not yellowstone_dir.stat.exists

- name: Build yellowstone-grpc
  shell:
    cmd: cargo build --release
    chdir: /home/solana/yellowstone-grpc
  environment:
    RUSTFLAGS: "-C target-cpu=native"
  become: yes
  become_user: solana
  when: not geyser_plugin.stat.exists

- name: Copy geyser plugin config template
  template:
    src: geyser-config.json
    dest: /home/solana/yellowstone-grpc/yellowstone-grpc-geyser/config.json
    mode: '0644'
    owner: solana
    group: solana



- name: Enable and start Solana validator service
  systemd:
    name: solana-validator
    enabled: yes
    state: started